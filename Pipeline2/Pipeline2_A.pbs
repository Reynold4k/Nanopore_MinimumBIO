#!/bin/bash
#PBS -l select=1:ncpus=16:mem=128gb        # Set the number of cores and memory
#PBS -l walltime=04:00:00                  # Estimated execution time
#PBS -j oe                                 # Join stderr and stdout
#PBS -o /srv/scratch/z3546698/true/Small_Molecule/JQ1/CoT/240302/potential_hit/extract.log
#PBS -N extract_hits                       # Job name
#PBS -m abe                                # Email notifications: abort, begin, end

module load samtools/1.20
module load seqkit/2.5.1                      # Ensure seqkit is available
module load canu/2.2
module load bedtools2/2.30.0  
module load r/4.4.0
module load blast-plus/2.12.0 

# Paths to directories and files
PARENT_DIR="/srv/scratch/z3546698/true/Small_Molecule/FK506/T7MB-2/231119/R3/step2"
OUTPUT_DIR="/srv/scratch/z3546698/true/Small_Molecule/FK506/T7MB-2/231119/potential_hit"
VISUAL_DIR="/srv/scratch/z3546698/true/Small_Molecule/FK506/T7MB-2/231119/potential_hit/visualization"  # Directory for visualizations
ANN_FILE="/srv/scratch/z3546698/true/reference/Homo_sapiens.GRCh38.110.gtf"
FASTQ_DIR="${OUTPUT_DIR}/FASTQ"


GENOME_FASTA="/srv/scratch/z3546698/true/reference/hg38.fa"  # Reference FASTA file

# Ensure visualization directory exists
mkdir -p "$VISUAL_DIR"
mkdir -p "$FASTQ_DIR"
mkdir -p "$OUTPUT_DIR"

# List of genes to process
GENES=("FKBP1A" "FKBP1C") # Add your desired gene names here

# Loop through each gene
for gene_name in "${GENES[@]}"; do
  # Extract all locations for hits from the GTF file and prefix with 'chr'
  Hit_LOCATIONS=$(awk -v gene="$gene_name" '$3 == "exon" && $0 ~ gene {print "chr"$1":"$4"-"$5}' "$ANN_FILE")

  # Skip to next gene if no locations are found
  if [ -z "$Hit_LOCATIONS" ]; then
    echo "No potential hit locations found for $gene_name in the annotation file."
    continue
  fi

  # Loop over each sorted BAM file
  cd "$PARENT_DIR"
  for bam_file in *_trimmed_sorted.bam; do
    # Check and create index if needed
    if [ ! -f "$bam_file.bai" ]; then
      echo "Indexing $bam_file..."
      samtools index "$bam_file"
    fi

    OUTPUT_BAM="${OUTPUT_DIR}/${gene_name}_Hit_${bam_file}"
    echo "Extracting potential hits for $gene_name from $bam_file to $OUTPUT_BAM..."

    # Extract reads for all potential hits locations
    samtools view -b "$bam_file" $Hit_LOCATIONS > "$OUTPUT_BAM"
  done
done

echo "Extraction complete."


# Step 1: Convert BAM files to FASTQ and run Canu individually per gene
cd "$OUTPUT_DIR"
for bam_file in *_Hit_*.bam; do
    # Extract the gene name from the BAM file name
    gene_name=$(basename "${bam_file}" | cut -d'_' -f1)
    
    # Convert BAM to FASTQ
    fastq_file="${FASTQ_DIR}/${gene_name}.fastq"
    echo "Converting $bam_file to $fastq_file..."
    samtools fastq "$bam_file" > "$fastq_file"
    
    # Prepare output directory for Canu
    canu_output_dir="${FASTQ_DIR}/canu_out_${gene_name}"
    mkdir -p "$canu_output_dir"
    
    # Run Canu for error correction
    echo "Running Canu assembly for $gene_name from $fastq_file..."
    canu \
        -p "${gene_name}_corrected" -d "$canu_output_dir" \
        genomeSize=0.038m \
        -nanopore-raw "$fastq_file" \
        corOutCoverage=100
done

echo "Canu assembly for all genes complete."


# Loop through each BAM file
cd "$OUTPUT_DIR"
for bam_file in *_Hit_*.bam; do

  # Convert BAM to BED using bedtools
  bed_file="${bam_file%.bam}.bed"
  bedtools bamtobed -i "$bam_file" > "$bed_file"
  
  # Sort BED file
  sorted_bed_file="${bed_file%.bed}_sorted.bed"
  sort -k1,1 -k2,2n "$bed_file" > "$sorted_bed_file"

  # Merge overlapping regions and calculate coverage
  merged_bed_file="${bed_file%.bed}_merged.bed"
  bedtools merge -i "$sorted_bed_file" -c 4 -o count > "$merged_bed_file"

  # Convert BAM to BEDGraph for coverage visualization
  bedgraph_file="${bam_file%.bam}.bedgraph"
  bedtools genomecov -ibam "$bam_file" -bg > "$bedgraph_file"

  # Call R script to create visualization
  if command -v Rscript &> /dev/null; then
    Rscript -e "
      library(ggplot2)
      library(dplyr)

      # Read bedgraph data for detailed coverage
      cov_data <- read.table('$bedgraph_file', header=FALSE)
      colnames(cov_data) <- c('chr', 'start', 'end', 'coverage')

      # Create a plot object with color gradient based on coverage
      p <- ggplot(cov_data, aes(x=start, xend=end, y=coverage, yend=coverage, fill=coverage)) +
        geom_segment(size=3) +
        scale_fill_gradient(low='lightblue', high='darkred') +
        theme_minimal() +
        facet_wrap(~chr, scales='free_x', nrow=1) +
        labs(title='Coverage Visualization for ${bam_file}',
             x='Genomic Position',
             y='Coverage',
             fill='Coverage') +
        theme(strip.text.x = element_text(size = 8))

      # Save the plot to a file
      ggsave('${VISUAL_DIR}/${bam_file%.bam}_coverage_plot.png', plot=p, width=14, height=6)
    "
  else
    echo "Rscript is not available, skipping visualization for $bam_file"
  fi

done

echo "Analysis and visualization complete."

